function deobfuscateString(inputString, mapping, name) {
	// Regular expression to match the pattern R[`KEY`]
	const regex = new RegExp(`${name}\\[\`(.*?)\`\]`, 'g');

	// Replace function to substitute the matched pattern with the corresponding value from the mapping
	const replacedString = inputString.replace(regex, (match, key) => {
		if (mapping.hasOwnProperty(key)) {
			const value = mapping[key];

			// If value does not exist, return the key
			if (value === undefined) {
				console.log(`Key: ${key} does not exist in the mapping`);
				return key;
			}

			// Check if the value is a string
			return typeof value === 'string' ? `\`${value}\`` : value;
		}
		return match;
	});

	return replacedString;
}

const fs = require('fs');
const path = require('path');

// Paste here object with mapping

// Replace with file name
const filename = '6.0.js';

// Get the file
const code = fs.readFileSync(path.join(__dirname, filename), 'utf8');

// Replace the obfuscated strings with the original values
const deobfuscatedCode = deobfuscateString(code, OBJECT_WITH_MAPPING_NAME, 'OBJECT_WITH_MAPPING_NAME')
console.log(deobfuscatedCode);

// Write to file
fs.writeFile(filename + '-2.js', deobfuscatedCode, err => {
	if (err) {
		console.error(err);
	} else {
		console.log('file written successfully')
	}
})
